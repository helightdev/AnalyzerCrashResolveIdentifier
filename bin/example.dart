import 'package:dogs_core/dogs_core.dart';
import 'package:macros/macros.dart';

import 'package:macro_test/dogs_gen.dart';

void main() {
  var engine = DogEngine();
  engine.setSingleton();

  // You need to register all converters before using them
  engine.registerAllConverters([Note.converter, MyModel.converter]);

  // Using the autogenerated constructor
  var obj = MyModel(
      name: "Hello!",
      birthday: DateTime.now(),
      note: Note(content: "Test", attributes: {}));
  print(engine.toJson<MyModel>(obj));

  // CopyWith Example
  print(engine.toJson<MyModel>(obj.copyWith(
      name: "Adam",
      note: Note(content: "This is a note!", attributes: {"key": "value"}))));

  // Builder Example
  print(engine.toJson<MyModel>(obj.rebuild((p0) => p0
    ..name = "Adam"
    ..note = Note(content: "This is a note!", attributes: {"key": "value"}))));

  print("===");
  print(engine.toJson<MyModel>(obj.copyWith(note: null)));
  print(engine.toJson<MyModel>(obj.copyWith(name: "Adam")));
  print(engine.toJson<MyModel>(obj.copyWith(
      name: "Adam",
      note: Note(content: "Overrides!", attributes: {"key": "value"}))));
  print("===");

  /// Testing equality
  print(obj == obj);
  print(obj == obj.rebuild((p0) => p0..name = "Adam"));
  print(obj.rebuild((p0) => p0..name = "Adam") ==
      obj.rebuild((p0) => p0..name = "Adam"));
}

@Model()
class MyModel {
  @fieldAnnotation
  @CustomAnnotation()
  final String name;
  @Default(18)
  final int age;
  final DateTime birthday;
  final Note? note;
}

@Model()
class Note {
  final String content;
  final Map<String, String> attributes;
}

class CustomAnnotation implements RetainedAnnotation {
  const CustomAnnotation();
}

const fieldAnnotation = CustomAnnotation();
